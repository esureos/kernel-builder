name: Build Android GKI Kernel

on:
  workflow_dispatch:
    inputs:
      kernel_branch:
        description: "Kernel branch to build (e.g., common-android12-5.10)"
        required: true
        default: "common-android12-5.10"

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: 检出代码
      - name: Checkout GitHub repository
        uses: actions/checkout@v4

      # Step 2: 设置系统依赖
      - name: Set up dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y bc bison flex libssl-dev libncurses5-dev
          sudo apt-get install -y ccache git-core python3 curl aria2

      # Step 3: 安装 repo 工具
      - name: Install repo tool
        run: |
          mkdir -p ~/bin
          curl https://storage.googleapis.com/git-repo-downloads/repo > ~/bin/repo
          chmod a+x ~/bin/repo
          # 添加自定义路径并保留系统默认路径
          echo "PATH=$HOME/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:$PATH" >> $GITHUB_ENV

      # Step 4: 缓存 kernel 源码和环境
      - name: Cache kernel source and toolchain
        uses: actions/cache@v3
        with:
          path: kernel
          key: ${{ runner.os }}-kernel-${{ github.event.inputs.kernel_branch }}
          restore-keys: |
            ${{ runner.os }}-kernel-

      # Step 5: 下载 AOSP GKI 源码及工具链（如果缓存未命中）
      - name: Download AOSP GKI kernel source and toolchain
        if: steps.cache-kernel-source-and-toolchain.outputs.cache-hit != 'true'
        run: |
          mkdir -p kernel
          cd kernel
          # 初始化仓库
          repo init -u https://android.googlesource.com/kernel/manifest -b ${{ github.event.inputs.kernel_branch }}
          # 同步源码和工具链
          repo sync -j$(nproc) --no-clone-bundle --optimized-fetch

      # Step 6: 验证工具链和路径
      - name: Verify toolchain
        run: |
          ls -al kernel/prebuilts/clang/host/linux-x86/
          echo "PATH: $PATH"

      # Step 7: 配置内核
      - name: Configure kernel
        run: |
          cd kernel/common
          export ARCH=arm64
          export SUBARCH=arm64
          # 动态工具链路径
          export PATH=$PWD/prebuilts/clang/host/linux-x86/clang-r*/bin:$PATH
          export CROSS_COMPILE=aarch64-linux-gnu-
          make O=out aarch64_gki_defconfig

      # Step 8: 编译内核
      - name: Build kernel
        run: |
          cd kernel/common
          export ARCH=arm64
          export PATH=$PWD/prebuilts/clang/host/linux-x86/clang-r*/bin:$PATH
          make -j$(nproc) O=out | tee build.log

      # Step 9: 上传构建日志和结果
      - name: Upload build log
        uses: actions/upload-artifact@v4
        with:
          name: build-log
          path: kernel/common/build.log
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: kernel-build
          path: kernel/common/out/arch/arm64/boot/
