name: Build Android GKI Kernel

on:
  workflow_dispatch:
    inputs:
      kernel_branch:
        description: "Kernel branch to build (e.g., android12-5.10)"
        required: true
        default: "android12-5.10"
      clang_version:
        description: "Clang version (e.g., clang-r530567)"
        required: true
        default: "clang-r530567"

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: 检出代码
      - name: Checkout GitHub repository
        uses: actions/checkout@v4

      # Step 2: 设置系统依赖
      - name: Set up dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y bc bison flex libssl-dev libncurses5-dev
          sudo apt-get install -y ccache git-core python3 curl

      # Step 3: 安装 repo 工具
      - name: Install repo tool
        run: |
          mkdir -p ~/bin
          curl https://storage.googleapis.com/git-repo-downloads/repo > ~/bin/repo
          chmod a+x ~/bin/repo
          echo "PATH=$HOME/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:$PATH" >> $GITHUB_ENV

      # Step 4: 缓存工具链
      - name: Cache prebuilt clang
        uses: actions/cache@v3
        with:
          path: prebuilts/clang/host/linux-x86/${{ github.event.inputs.clang_version }}
          key: ${{ runner.os }}-clang-${{ github.event.inputs.clang_version }}

      # Step 5: 下载工具链
      - name: Download AOSP prebuilt clang
        if: steps.cache-prebuilt-clang.outputs.cache-hit != 'true'
        run: |
          mkdir -p prebuilts/clang/host/linux-x86
          wget https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+archive/refs/heads/main/${{ github.event.inputs.clang_version }}.tar.gz -O clang.tar.gz
          tar -xzf clang.tar.gz -C prebuilts/clang/host/linux-x86

      # Step 6: 缓存源码
      - name: Cache kernel source
        uses: actions/cache@v3
        with:
          path: kernel
          key: ${{ runner.os }}-kernel-${{ github.event.inputs.kernel_branch }}

      # Step 7: 下载 AOSP GKI 源码
      - name: Download AOSP GKI kernel source
        if: steps.cache-kernel-source.outputs.cache-hit != 'true'
        run: |
          mkdir -p kernel
          cd kernel
          repo init -u https://android.googlesource.com/kernel/common -b ${{ github.event.inputs.kernel_branch }}
          repo sync -j$(nproc) --no-clone-bundle --optimized-fetch

      # Step 8: 配置内核
      - name: Configure kernel
        run: |
          cd kernel/common
          export ARCH=arm64
          export SUBARCH=arm64
          export PATH=$PWD/prebuilts/clang/host/linux-x86/${{ github.event.inputs.clang_version }}/bin:$PATH
          export CROSS_COMPILE=aarch64-linux-gnu-
          make O=out aarch64_gki_defconfig

      # Step 9: 编译内核
      - name: Build kernel
        run: |
          cd kernel/common
          export ARCH=arm64
          export PATH=$PWD/prebuilts/clang/host/linux-x86/${{ github.event.inputs.clang_version }}/bin:$PATH
          make -j$(nproc) O=out | tee build.log

      # Step 10: 上传构建日志和结果
      - name: Upload build log
        uses: actions/upload-artifact@v4
        with:
          name: build-log
          path: kernel/common/build.log
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: kernel-build
          path: kernel/common/out/arch/arm64/boot/
